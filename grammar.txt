program             :   statement* ;

statement           :   fn_def_stmt
                    |   expression_stmt 
                    |   return_stmt
                    |   variable_decl_stmt
                    |   assignment_stmt
                    |   if_else_stmt
                    |   while_stmt
                    |   for_stmt
                    |   break_stmt
                    |   block_stmt ;

fn_def_stmt         :   'fn' IDENTIFIER '(' fn_decl_parameters? ')' block_stmt ;

expression_stmt     :   expr ';' ;

return_stmt         :   'return' expr ';' ;

variable_decl_stmt  :   'let' IDENTIFIER '=' expr ';' ;

assignment_stmt     :   ( IDENTIFIER | array_access ) '=' expr ';' ;

if_else_stmt        :   'if' '(' expr ')' block_stmt ( 'else' block_stmt )? ;

while_stmt          :   'while' '(' expr ')' block_stmt ;

for_stmt            :   'for' '(' statement expression_stmt statement ')' block_stmt ;

break_stmt          :   'break' ';' ;

block_stmt          :   '{' statement* '}' ;

fn_decl_parameters  :   IDENTIFIER ( ',' IDENTIFIER )* ;

expr                :   logical_or ;

logical_or          :   logical_and ( '||' logical_and )* ;

logical_and         :   equality ( '&&' equality )* ;

equality            :   comparative ( ( '==' | '!=' ) comparative )* ;

comparative         :   additive ( ( '>' | '>=' | '<' | '<=' ) additive )* ;

additive            :   multiplicative ( ( '+' | '-' ) multiplicative )* ;

multiplicative      :   unary ( ( '*' | '/' ) unary )* ;

unary               :   ( '-' | '!' ) unary
                    |   primary
                    |   array_access
                    |   fn_call ;

primary             :   NUMBER 
                    |   STRING 
                    |   IDENTIFIER 
                    |   'true' 
                    |   'false' 
                    |   'nil'
                    |   sequence
                    |   '(' expr ')' ;

sequence            :   '[' ( expr ( ',' expr )* )? ']' ;

array_access        :   unary '[' expr ']' ;

fn_call             :   IDENTIFIER '(' parameters? ')' ;

parameters          :   expr ( ',' expr )* ;

NUMBER              :   [0-9]+ ;

STRING              :   '"' .* '"' ;

IDENTIFIER          :   [a-zA-Z_][a-zA-Z_0-9]+ ;
