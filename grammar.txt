// Tokens
IDENTIFIER          : [a-zA-Z_][a-zA-Z0-9_]*
NUMBER              : [0-9]+
STRING              : '"' .* '"
OPERATOR            : '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '>' | '<=' | '>='
BOOLEAN             : 'true' | 'false'
NIL                 : 'nil'

// Grammar rules
program             :   statement_list
statement_list      :   statement*

statement           :   fn_def_stmt
                    |   variable_decl_stmt
                    |   assignment_stmt
                    |   if_else_stmt
                    |   while_stmt
                    |   for_stmt
                    |   break_stmt
                    |   return_stmt
                    |   block_stmt
                    |   expression_stmt 

fn_def_stmt         :   'fn' IDENTIFIER '(' fn_decl_parameters? ')' block_stmt
fn_decl_parameters  :   IDENTIFIER ( ',' IDENTIFIER )*
variable_decl_stmt  :   'let' IDENTIFIER '=' expr ';'
assignment_stmt     :   ( IDENTIFIER | array_access ) '=' expr ';'
if_else_stmt        :   'if' '(' expr ')' block_stmt ( 'else' block_stmt )?
while_stmt          :   'while' '(' expr ')' block_stmt
for_stmt            :   'for' '(' statement expression_stmt statement ')' block_stmt
break_stmt          :   'break' ';'
return_stmt         :   'return' expr ';'
block_stmt          :   '{' statement_list '}'
expression_stmt     :   expr ';'

expr                :   logical_or
logical_or          :   logical_and ( '||' logical_and )* ;
logical_and         :   equality ( '&&' equality )* ;
equality            :   comparative ( ( '==' | '!=' ) comparative )* ;
comparative         :   additive ( ( '>' | '>=' | '<' | '<=' ) additive )* ;
additive            :   multiplicative ( ( '+' | '-' ) multiplicative )* ;
multiplicative      :   unary ( ( '*' | '/' ) unary )* ;
unary               :   ( '-' | '!' ) primary
primary             :   NUMBER 
                    |   STRING 
                    |   IDENTIFIER 
                    |   BOOLEAN
                    |   NIL
                    |   fn_call
                    |   method_call
                    |   array_creation
                    |   array_access  
                    |   '(' expr ')'

fn_call             :   IDENTIFIER '(' parameters? ')' ;
method_call         :   primary '.' fn_call;
parameters          :   expr ( ',' expr )* ;
array_creation      :   '[' ( expr ( ',' expr )* )? ']'
array_access        :   ( IDENTIFIER | fn_call | array_creation ) '[' expr ']' ( '[' expr ']' )*
