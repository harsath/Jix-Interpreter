program             :   statement* ;

statement           :   fn_def_stmt
                    |   expression_stmt 
                    |   return_stmt
                    |   variable_decl_stmt
                    |   assignment_stmt
                    |   if_else_stmt
                    |   while_stmt
                    |   block_stmt ;

fn_def_stmt         :   data_type IDENTIFIER '(' fn_decl_parameters? ')' block_stmt ;

expression_stmt     :   expr ';' ;

return_stmt         :   'return' expr ';' ;

variable_decl_stmt  :   data_type primary '=' expr ';' ;

assignment_stmt     :   primary '=' expr ';' ;

if_else_stmt        :   'if' '(' expr ')' block_stmt ( 'else' block_stmt )? ;

while_stmt          :   'while' '(' expr ')' block_stmt ;

block_stmt          :   '{' statement* '}' ;

fn_decl_parameters  :   data_type expr ( ',' data_type expr )* ;

data_type           :   'int' | 'string' | 'bool' ;

expr                :   logical_or ;

logical_or          :   logical_and ( '||' logical_and )* ;

logical_and         :   equality ( '&&' equality )* ;

equality            :   comparitive ( ( '==' | '!=' ) comparitive )* ;

comparitive         :   additive ( ( '>' | '>=' | '<' | '<=' ) additive )* ;

additive            :   multiplicative ( ('+' | '-') multiplicative )* ;

multiplicative      :   unary ( ('*' | '/') unary )* ;

unary               :   ( '-' | '!' ) unary
                    |   primary
                    |   fn_call;

primary             :   NUMBER | STRING | IDENTIFIER | 'true' | 'false' | 'nil'
                    |   '(' expr ')' ;

fn_call             :   IDENTIFIER '(' parameters? ')' ;

parameters          :   expr (',' expr)* ;

NUMBER              :   [0-9]+ ;

STRING              :   '"' .* '"' ;

IDENTIFIER          :   [a-zA-Z_][a-zA-Z_0-9]+
